runconfig:
    name: NISAR_L2-L-GSLC_RUNCONFIG

    groups:
        pge_name_group:
            pge_name: GSLC_L_PGE

        input_file_group:
            # REQUIRED - One NISAR L1B RSLC formatted HDF5 file
            input_file_path: output_rslc_sec/rslc.h5

            qa_input_file: output_gslc_sec/gslc.h5

        dynamic_ancillary_file_group:
            # REQUIRED - Use the provided DEM as input
            dem_file: input_L0B_RRSD_ALPSRP116870680_Rosamond/dem.tiff

            # PLACEHOLDER - Sample of file name format
            tec_file: input_L0B_RRSD_ALPSRP116870680_Rosamond/NISAR_ANCL_TEC_20230124T021043_20080404T061910_20080404T061940_v0.0.json

        product_path_group:
            # REQUIRED - Directory where PGE will place results. Irrelevant to SAS.
            product_path: output_gslc_sec

            # REQUIRED - Directory where SAS can write temporary data
            scratch_path: scratch_gslc_sec

            # REQUIRED - SAS writes output product to the following file. PGE may rename.
            # NOTE: For R2 will need to handle mixed-mode case with multiple outputs of RSLC workflow.
            sas_output_file: output_gslc_sec/gslc.h5

            qa_output_dir: qa_gslc_sec

        primary_executable:
            product_type: GSLC

        debug_level_group:
            debug_switch: false

        # ADT section - isce3 + pyre workflow
        processing:
            input_subset:
                # Frequencies and polarisations to be processed
                list_of_frequencies:
                    # keys for frequency A and B are required.
                    # valid options for polarizations
                    #   'all' for processing all polarizations from RSLC
                    #   [HH, VV, ...] list of polarizations to be processed
                    #   empty for no polarizations to be processed
                    # REQUIRED - In same units as output EPSG
                    A:

            # TODO OPTIONAL - Only checked when internet access is available
            dem_download:
                # OPTIONAL - s3 bucket / curl URL / local file
                source: None
                top_left:
                    x:
                    y:
                bottom_right:
                    x:
                    y:

            # OPTIONAL - do we need this step. Should bandpass filter from 40MHz/20MHz be included
            pre_process:
                filter:
                    A:
                        type:
                        parameters:
                    B:
                        type:
                        parameters:

            # OPTIONAL - Mechanism to specify output posting and DEM
            geocode:
                # OPTIONAL - To control output grid in same units as output EPSG
                x_snap:

                # OPTIONAL - To control output grid in same units as output EPSG
                y_snap:

                # OPTIONAL - Same as input DEM if not provided.
                output_epsg:

                # OPTIONAL - Spacing between pixels, in same units as output EPSG.
                # If no provided, values will match spacing in provided DEM
                output_posting:
                    A:
                        x_posting:
                        y_posting:
                    B:
                        x_posting:
                        y_posting:

                # OPTIONAL - Can control with absolute values or with snap values
                top_left:
                    # OPTIONAL - Set top-left y in same units as output EPSG
                    y_abs:
                    # OPTIONAL - Set top-left x in same units as output EPSG
                    x_abs:

                # OPTIONAL - Can control with absolute values or with snap values
                bottom_right:
                    y_abs:
                    x_abs:

            geo2rdr:
                threshold: 1.0e-8
                # OPTIONAL - Max number of primary iterations: int (default: 25)
                maxiter: 25

            # the core module processes the data block by block to mange memory for large datasets
            blocksize:
                # number of lines in northing direction of a block of the geocoded grid
                y: 2000
                # number of lines in easting direction of a block of the geocoded grid
                x: 2000

            # flag to flatten output GSLC
            flatten: True

        # OPTIONAL - To setup type of worker
        worker:
            # OPTIONAL - To prevent downloading DEM / other data automatically. Default True
            internet_access: False

            # OPTIONAL - To explicitly use GPU capability if available. Default False
            gpu_enabled: False
            # TODO
            #gpu_id: 0

        # OPTIONAL - Location to save logs, use runconfig*_yaml.log if not specified
        logging:
            path: output_gslc_sec/gslc.log
            write_mode: 'w'

        qa:
            workflows:
                validate: true
                qa_reports: true
