runconfig:
    name: str()

    groups:
        pge_name_group:
            pge_name: enum('GCOV_L_PGE')

        input_file_group:
            # REQUIRED - One NISAR L1B RSLC formatted HDF5 file
            input_file_path: str()

            # REQUIRED for QA. NOT REQUIRED if only running Product SAS.
            # If Product SAS and QA SAS are run back-to-back,
            # this field should be identical to `sas_output_file`.
            # Otherwise, this field is the filename of the single
            # NISAR product for QA to process.
            qa_input_file: str(required=False)

        dynamic_ancillary_file_group:
            # REQUIRED - Digital elevation model
            dem_file: str()

            # PLACEHOLDER - Digital elevation model file description, optional
            dem_file_description: str(required=False)

            # External orbit file
            orbit_file: str(required=False)

            # TEC file used for geolocation correction. If no file present, no
            # TEC correction is applied
            tec_file: str(required=False)

        product_path_group:
            # Directory where PGE will place results
            product_path: str()
            product_counter: int(min=1, max=999, required=False)

            # Directory where SAS can write temporary data
            scratch_path: str()

            # Intermediate file name. SAS writes output product to the following file.
            # After the SAS completes, the PGE wrapper renames the product file
            # according to proper file naming conventions.
            sas_output_file: str()

            # REQUIRED for QA. NOT REQUIRED if only running Product SAS.
            # Output directory to store all QA output files.
            # Defaults to './qa'
            qa_output_dir: str(required=False)

        # Output options for GCOV terms (e.g., HHHH, HVHV, VVVV)
        output_gcov_terms: include('output_options', required=False)

        # Output options for secondary layers
        output_secondary_layers: include('output_options', required=False)

        primary_executable:
            product_type: enum('GCOV')
            product_version: str('^\d+\.\d+\.\d+$', required=False)
            composite_release_id: regex(r'\w\d\d\d\d\d', name='CRID', required=False)
            processing_type: enum('PR', 'UR', required=False)
            product_accuracy: enum('P', 'M', 'N', 'F', required=False)
            urgent_request_id: list(str(), required=False)
            processing_center: str(required=False)
            data_source: enum('A', 'M', required=False)
            partial_granule_id: str(required=False)

        debug_level_group:
            debug_switch: bool()

        #adt section - isce3 + pyre workflow
        processing:
            # Mechanism to select frequencies and polarizations
            input_subset: include('input_subset_options', required=False)

            # DEM download options: checked only if internet access is available
            dem_download: include('dem_download_options', required=False)

            # Pre-processing (before geocoding) options
            pre_process: include('pre_process_options', required=False)

            # Radiometric Terrain Correction (RTC)
            rtc: include('rtc_options', required=False)

            # Geocode options: (e.g. output posting)
            geocode: include('geocode_options', required=False)

            # Radar grids cube options
            radar_grid_cubes:  include('radar_grid_cubes_options', required=False)

            # Calibration information options
            calibration_information: include('calibration_information_options', required=False)

            # Processing information options
            processing_information: include('processing_information_options', required=False)

            geo2rdr: include('geo2rdr_options', required=False)

            dem_interpolation_method: enum('sinc', 'bilinear', 'bicubic', 'nearest', 'biquintic', required=False)

            # Noise correction options (for ISRO)
            noise_correction: include('noise_correction_options', required=False)

        # Worker options (e.g., enable/disable GPU processing, set GPU device ID)
        worker: include('worker_options', required=False)

        # Quality Assurance software options
        qa: include('qa_options', required=False)

        # Place holder for user set path to log file.
        # If not set, log sent to screen or input yaml path derived file
        logging: include('log_nfo', required=False)

---
input_subset_options:
    # List of frequencies to process. Default empty representing all
    list_of_frequencies: include('list_of_frequencies_options', required=False)

    # Compute cross-elements (True) or diagonals only (False). Default: False
    fullcovariance: bool(required=False)

    # Perform polarimetric symmetrization. It's only applicable
    # for quad-polarimetric datasets (i.e. datasets that include
    # HV and VH), otherwise, the flag is ignored.
    symmetrize_cross_pol_channels:  bool(required=False)

list_of_frequencies_options:
    # List of polarization channels to process. Default empty representing all
    A: any(list(str(min=2, max=2), min=1, max=4), str(min=2, max=2), null(), required=False)
    B: any(list(str(min=2, max=2), min=1, max=4), str(min=2, max=2), null(), required=False)

radar_grid_cubes_options:

    # List of heights in meters
    heights: list(num(), required=False)

    # Same as input DEM if not provided.
    output_epsg: int(min=1024, max=32767, required=False)

    # Output posting in same units as output EPSG.
    # If not provided, spacing values will be taken from provided DEM.
    output_posting:
        x_posting: num(min=0, required=False)
        y_posting: num(min=0, required=False)

    # To control output grid in same units as output EPSG
    x_snap: num(min=0, required=False)

    # To control output grid in same units as output EPSG
    y_snap: num(min=0, required=False)

    top_left:
        # Set top-left y in same units as output EPSG
        y_abs: num(required=False)

        # Set top-left x in same units as output EPSG
        x_abs: num(required=False)

    bottom_right:
        # Set bottom-right y in same units as output EPSG
        y_abs: num(required=False)

        # Set bottom-right x in same units as output EPSG
        x_abs: num(required=False)

calibration_information_options:

    # Output posting in same units as output EPSG.
    output_posting:
        x_posting: num(min=0, required=False)
        y_posting: num(min=0, required=False)

processing_information_options:

    # Output posting in same units as output EPSG.
    output_posting:
        x_posting: num(min=0, required=False)
        y_posting: num(min=0, required=False)

geo2rdr_options:
    # Convergence threshold for geo2rdr algorithm
    threshold: num(min=0, required=False)

    # Maximum number of iterations
    maxiter: int(min=1, required=False)

qa_options:
    # For descriptions of all QA parameters, see template runconfig (in `defaults` directory)
    workflows: include('workflows_options', required=False)
    qa_reports: include('qa_reports_options', required=False)

workflows_options:
    validate: bool(required=False)
    qa_reports: bool(required=False)

qa_reports_options:
    backscatter_img:
        linear_units: bool(required=False)
        nlooks_freqa: list(int(min=1), min=2, max=2, required=False)
        nlooks_freqb: list(int(min=1), min=2, max=2, required=False)
        longest_side_max: int(min=1, required=False)
        percentile_for_clipping: list(num(min=0.0, max=100.0), min=2, max=2, required=False)
        gamma: num(min=0.0, required=False)
        tile_shape: list(int(min=-1), min=2, max=2, required=False)
    histogram:
        decimation_ratio: list(int(min=1), min=2, max=2, required=False)
        backscatter_histogram_bin_edges_range: list(num(), min=2, max=2, required=False)
        phs_in_radians: bool(required=False)
        tile_shape: list(int(min=-1), min=2, max=2, required=False)

log_nfo:
    # Path to log file
    path: str()

    # Log file write mode. 'a' for append to existing. 'w' for new or overwrite existing.
    write_mode: enum('a', 'w', required=False)

dem_download_options:
    # s3 bucket / curl URL / local file
    source: str(required=False)
    top_left:
            # Top-left X coordinate
            x: num(required=False)
            # Top-left Y coordinate
            y: num(required=False)

    bottom_right:
            # Bottom-right X coordinate
            x: num(required=False)
            # Bottom-right Y coordinate
            y: num(required=False)

pre_process_options:
    # Number of looks in azimuth
    azimuth_looks: int(min=1, required=False)

    # Number of looks in slant range
    range_looks: int(min=1, required=False)

rtc_options:
    # RTC output type: empty value to turn off the RTC
    # The output_type defaults to "gamma0" if the key is absent
    output_type: enum('gamma0', 'sigma0', required=False)

    algorithm_type: enum('area_projection', 'bilinear_distribution', required=False)

    input_terrain_radiometry: enum('beta0', 'sigma0', required=False)

    # Minimum RTC area factor in dB
    rtc_min_value_db: num(required=False)

    # RTC DEM upsampling
    dem_upsampling: int(min=1, required=False)

    # RTC area beta mode. Options:
    # 'auto' - Default value is defined by the RTC algorithm that is being
    #     executed, i.e., 'pixel_area' for 'algorithm_type' equal to
    #     'bilinear_distribution' and 'projection_angle' for
    #     'algorithm_type' equal to 'area_projection'
    #  'pixel_area' - Estimate the beta surface reference area `A_beta`
    #     using the pixel area, which is the product of the range spacing
    #     by the azimuth spacing (computed using the ground velocity)
    #  'projection_angle' - estimate the beta surface reference area `A_beta`
    #     using the projection angle method:
    #     `A_beta = A_sigma * cos(projection_angle)`
    area_beta_mode: enum('auto', 'pixel_area', 'projection_angle', required=False)

geocode_options:

    # Geocoding algorithm type, area projection, or interpolation:
    # sinc, bilinear, bicubic, nearest, and biquintic
    algorithm_type: enum('area_projection', 'sinc', 'bilinear', 'bicubic', 'nearest', 'biquintic', required=False)

    # Apply radiometric terrain correction
    apply_rtc: bool(required=False)

    # Apply dry tropospheric delay correction
    apply_dry_tropospheric_delay_correction: bool(required=False)

    # Apply wet tropospheric delay correction
    apply_wet_tropospheric_delay_correction: bool(required=False)

    # Apply range ionospheric delay correction
    apply_range_ionospheric_delay_correction: bool(required=False)

    # Apply azimuth ionospheric delay correction
    apply_azimuth_ionospheric_delay_correction: bool(required=False)

    # Apply RSLC metadata valid-samples sub-swath masking
    apply_valid_samples_sub_swath_masking: bool(required=False)

    # Apply shadow masking
    apply_shadow_masking: bool(required=False)

    # Memory mode
    memory_mode: enum('auto', 'single_block', 'geogrid', 'geogrid_and_radargrid', required=False)

    # Processing upsampling factor on top of the input geogrid
    geogrid_upsampling: int(required=False)

    # Save the number of looks used to compute GCOV
    save_nlooks: bool(required=False)

    # Save the area normalization factor (ANF) to normalize GCOV
    # imagery to the original SLC backscatter convention:
    # beta0 or sigma0 (ellipsoid)
    save_rtc_anf: bool(required=False)

    # Save the RTC area normalization factor (ANF) gamma0 to sigma0
    save_rtc_anf_gamma0_to_sigma0: bool(required=False)

    # PLACEHOLDER - Save interpolated DEM used to compute GCOV
    save_dem: bool(required=False)

    # PLACEHOLDER - Save layover shadow mask
    save_layover_shadow_mask: bool(required=False)

    # PLACEHOLDER - Save the incidence angle
    save_incidence_angle: bool(required=False)

    # PLACEHOLDER - Save the local-incidence angle
    save_local_inc_angle: bool(required=False)

    # PLACEHOLDER - Save the projection angle
    save_projection_angle: bool(required=False)

    # PLACEHOLDER - Save the range slope angle
    save_range_slope: bool(required=False)

    # Absolute radiometric correction factor
    abs_rad_cal: num(required=False)

    # Clip values above threshold
    clip_max: num(required=False)

    # Clip values below threshold
    clip_min: num(required=False)

    # Double sampling of the radar-grid
    # input sampling in the range direction
    upsample_radargrid: bool(required=False)

    # Same as input DEM if not provided.
    output_epsg: int(min=1024, max=32767, required=False)

    # Output posting in same units as output EPSG.
    # If not provided, spacing values will be taken from provided DEM.
    output_posting:
        A:
            x_posting: num(min=0, required=False)
            y_posting: num(min=0, required=False)
        B:
            x_posting: num(min=0, required=False)
            y_posting: num(min=0, required=False)

    # To control output grid in same units as output EPSG
    x_snap: num(min=0, required=False)

    # To control output grid in same units as output EPSG
    y_snap: num(min=0, required=False)

    top_left:
        # Set top-left y in same units as output EPSG
        y_abs: num(required=False)

        # Set top-left x in same units as output EPSG
        x_abs: num(required=False)

    bottom_right:
        # Set bottom-right y in same units as output EPSG
        y_abs: num(required=False)

        # Set bottom-right x in same units as output EPSG
        x_abs: num(required=False)

    # Minimum block size in MB per thread
    min_block_size: num(min=0, required=False)

    # Maximum block size in MB per thread
    max_block_size: num(min=0, required=False)

noise_correction_options:
    # Enable/disable noise correction
    apply_correction: bool(required=False)

    correction_type: str(required=False)

worker_options:
    # Enable/disable internet connection (e.g. to download DEM)
    internet_access: bool(required=False)

    # To explicitly use GPU capability if available. Default False
    gpu_enabled: bool(required=False)

    # Index of the GPU to use for processing, optional. Defaults to the
    # first available CUDA device. Ignored if *gpu_enabled* is False.
    gpu_id: int(min=0, required=False)

output_options:

    # Output file format
    format: enum('HDF5', 'GTiff', 'ENVI', required=False)

    # Enable/disable compression of output raster
    compression_enabled: bool(required=False)

    # Output compression type
    compression_type: str(required=False)

    # Compression level
    # 1 - least compression, 9 - best compresssion
    compression_level: int(min=1, max=9, required=False)

    # Enable/disable chunking of output raster
    chunking_enabled: bool(required=False)

    # Chunk size of output raster as a list: [y, x]
    # If no value is specified, the chunk_size defaults to [512, 512]
    # or a smaller size, constrained by the dimensions of the image
    chunk_size: list(int(min=1), min=2, max=2, required=False)

    # Enable/disable shuffle filtering of output raster
    shuffle_filtering_enabled: bool(required=False)

    # Number bits retained in the mantissa of the floating point
    # representation of each component real and imaginary (if applicable)
    # of each output sample.
    # If no value is provided, the mantissa bits truncation is not applied
    mantissa_nbits: int(min=1, max=52, required=False)
